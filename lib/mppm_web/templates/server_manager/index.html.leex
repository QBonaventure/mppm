<section id="server-info">
  <div>
    <span>Login: <%= @server.login %></span>
    <span>Password: <details><%= @server.password %></details></span>
  </div>
</section>

<section id="game-server-chat" x-data="{ open: false}">
  <h1 @click="open = true">Chatbox</h1>
  <div class="displayable" x-show.transition="open" @click.away="open = false">
    <div id="chat-box">
      <%= for message  <- @chat do %>
        <div class="chat-message">
          <span class="chat-message-author"><%= message.user.nickname %> ></span>
          <span class="chat-message-class"><%= message.text %></span>
        </div>
      <% end %>
    </div>
    <div id="chat-message-input-box">
      <%= f = form_for @new_chat_message, "#", [phx_change: "validate-chat-message", phx_submit: "send-chat-message"] %>
        <%= textarea f, :text %>

        <button type="submit" <%= unless @new_chat_message.valid? do "disabled" end %>>Submit</button>    </form>
    </div>
  </div>
</section>

<section id="server-controls">
  <h1>Controls</h1>
  <%= tag(:input, type: "button", value: "Restart", phx_click: "restart-map") %>
  <%= tag(:input, type: "button", value: "Skip map", phx_click: "skip-map") %>
  <%= tag(:input, type: "button", value: "End round", phx_click: "end-round") %>
  <%= tag(:input, type: "button", value: "End Warmup", phx_click: "end-warmup") %>
  <%= tag(:input, type: "button", value: "End all WUs", phx_click: "end-all-warmup") %>
</section>

<section id="tracklist">
  <h1>Tracklist</h1>

  <div id="servers-maps-table" >
    <div class="row header">
      <div class="track-id">ID</div>
      <div class="track-author">Author</div>
      <div class="track-name">Name</div>
      <div class="track-remove"></div>
    </div>
    <div id="current-track-status">
      <%= case @current_track_status do
        :loading -> tag(:img, src: "/images/web_ui/yellow-light.svg")
        :playing -> tag(:img, src: "/images/web_ui/green-light.svg")
        :unloading -> tag(:img, src: "/images/web_ui/sand-clock.svg")
        :ending -> tag(:img, src: "/images/web_ui/finish-flag.svg")
      end %>
    </div>
    <div id="tracks-list" phx-hook="track_dropzone">
      <%= for track <- @tracklist.tracks |> Mppm.Repo.preload(:author) do %>
        <div id="track-<%= track.id %>" class="row played-tracks <%= if is_nil(track.id), do: "new" %>" draggable="true" phx-hook="draggable_server_track_hook">
          <div class="track-id"><%= track.mx_track_id %></div>
          <div class="track-author"><%= track.author.nickname %></div>
          <div class="track-name"><%= track.name %></div>
          <%= unless Enum.find_index(@tracklist.tracks, & &1.id == track.id) == 0 do %>
            <div class="track-play" phx-click="play-track" phx-value-track-id="<%= track.id %>">
              <img src="/images/web_ui/play-button.svg">
            </div>
            <div class="track-remove" phx-click="remove-track-from-list" phx-value-track-id="<%= track.id %>">
              <img src="/images/web_ui/trash-button.svg">
            </div>
          <% end %>
        </div>
      <% end %>
    </div>

  </div>
</section>



<%= live_component(@socket, MppmWeb.Live.Component.ManiaExchange, id: :mania_exchange_search_box) %>



<section id="server-users" x-data="{ open: false}">
  <h1 @click="open = true">Server Users</h1>
  <div class="displayable" x-show.transition="open" @click.away="open = false">
  <%= live_component @socket, MppmWeb.Live.Component.UsersManager, users: @users, server: @server %>
</section>


<section id="server-update-form" x-data="{ open: false}">
  <h1 @click="open = true">Server Settings</h1>
  <div class="displayable" x-show.transition="open" @click.away="open = false">
    <%= f = form_for @changeset, "#", [phx_change: :validate, phx_submit: "update-config"] %>

    <div class="form-controls">
      <%= submit "Submit" , disabled: Kernel.not @changeset.valid? %>
      <%= tag(:input, type: "button", value: "Cancel", phx_click: "cancel-form") %>
    </div>

    <% game_modes = @game_modes |> Enum.map(&{&1.name, &1.id}) %>
    <% respawn_behaviours = @respawn_behaviours |> Enum.map(&{&1.name, &1.id}) %>

      <section id="ruleset-subform">
        <h1>Ruleset</h1>
        <%= inputs_for f, :ruleset, fn rs -> %>


          <%= MppmWeb.ServerManagerView.select(rs, :mode_id, "Game Mode", game_modes) %>


          <h2>Time attack</h2>

          <%= MppmWeb.ServerManagerView.select(rs, :ta_respawn_behaviour_id, "Respawn bhvr", respawn_behaviours) %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :ta_time_limit, "Time limit") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :ta_warmup_nb, "Warmups nb") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :ta_warmup_duration, "WUs duration") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :ta_forced_laps_nb, "Forced laps nb") %>


          <h2>Rounds</h2>

          <%= MppmWeb.ServerManagerView.select(rs, :rounds_respawn_behaviour_id, "Respawn bhvr", respawn_behaviours) %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_finish_timeout, "Finish Timeout") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_warmup_nb, "Warmups nb") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_warmup_duration, "Warmup duration") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_maps_per_match, "Maps/match") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_rounds_per_map, "Rounds/map") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_pts_limit, "Points limit") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_pts_repartition, "Points repart") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :rounds_forced_laps_nb, "Forced laps") %>


          <h2>Team</h2>

          <%= MppmWeb.ServerManagerView.select(rs, :team_respawn_behaviour_id, "Respawn bhvr", respawn_behaviours) %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_finish_timeout, "Finish Timeout") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_warmup_nb, "Warmups nb") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_warmup_duration, "WUs duration") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_min_players_per_team, "Min pl./teamn") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_max_players_per_team, "Max pl./team") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_maps_per_match, "Maps/match") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_rounds_per_map, "Rounds/map") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_pts_limit, "Points limit") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_pts_repartition, "Points repart.") %>
          <%= MppmWeb.ServerManagerView.checkbox(rs, :team_cumulate_pts, "Cumulate Pts") %>
          <%= MppmWeb.ServerManagerView.checkbox(rs, :team_custom_pts_repartition, "Custom Points") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_max_pts_per_round, "Max pts/round") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_points_gap, "Points gap") %>
          <%= MppmWeb.ServerManagerView.checkbox(rs, :team_use_tie_breaker, "Tie breaker") %>
          <%= MppmWeb.ServerManagerView.text_input(rs, :team_forced_laps_nb, "Forced laps") %>

        <% end %>
      </section>


      <section id="server-settings">
        <h1>Server settings</h1>
        <%= inputs_for f, :config, fn c -> %>
          <%= MppmWeb.ServerManagerView.text_input(c, :player_pwd, "Pl. pwd") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :spec_pwd, "Spec. pwd") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :max_players, "Max players") %>
          <%= MppmWeb.ServerManagerView.checkbox(c, :disable_horns, "Disable horns") %>
          <%= MppmWeb.ServerManagerView.checkbox(c, :autosave_replays, "Autosave replays") %>
          <%= MppmWeb.ServerManagerView.checkbox(c, :autosave_validation_replays, "Autosave valid. replays") %>
          <%= MppmWeb.ServerManagerView.checkbox(c, :keep_player_slot, "Keep pl. slot") %>

          <h2>Advanced settings</h2>
          <%= MppmWeb.ServerManagerView.text_input(c, :ip_address, "IP address") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :bind_ip, "Bind to IP") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :connection_upload_rate, "Conn. U/L rate") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :connection_download_rate, "Conn. D/L rate") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :client_inputs_max_latency, "Cl. inp. max latency") %>
          <%= MppmWeb.ServerManagerView.select(c, :packet_assembly_multithread, "Pck ass. multith.", [true, false]) %>
          <%= MppmWeb.ServerManagerView.text_input(c, :packets_per_frame, "Packets/frame") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :full_packets_per_frame, "Full packets/frame") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :visuals_delay, "Visuals delays") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :trust_client_to_server_sending_rate, "Trust, C2S send/") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :visuals_server_to_client_sending_rate, "Visuals, S2C send/") %>
          <%= MppmWeb.ServerManagerView.text_input(c, :workers_nb, "Worker nb.") %>
          <%= MppmWeb.ServerManagerView.select(c, :disable_replay_recording, "Disable replay recording", [true, false]) %>
        <% end %>
      </section>


    </form>
  </div>
</section>


<section id="interface-settings-section" x-data="{ open: false}">
  <h1 @click="open = true">Interface Settings</h1>
  <div class="displayable" x-show.transition="open" @click.away="open = false">
    <%= live_component @socket, MppmWeb.Live.Component.UISettings, server: @server %>
  </div>
</section>
